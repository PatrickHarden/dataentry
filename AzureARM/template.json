{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "metadata": {
        "description": "Alphanumeric and hypens ONLY! [a-zA-Z0-9-] Name of all other resources."
      }
    },
    "appServicePlan": {
      "type": "string",
      "metadata": {
        "description": "Size of AppServicePlan for the set of resources used."
      }
    },
    "storageAccountName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "Name of the storage account 3-24 alphanumeric characters."
      }
    },
    "keyVaultName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "Name of the storage account 3-24 alphanumeric characters."
      }
    },
    "corsAllowedDomain": {
      "type": "string",
      "minLength": 3,
      "maxLength": 256,
      "metadata": {
        "description": "The domains that are allowed CORS access to the BLOB containers"
      }
    },
    "postgresAdminLogin": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Database administrator login name"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "minLength": 8,
      "maxLength": 128,
      "metadata": {
        "description": "Database administrator password"
      }
    },
    "postgresFuncPassword": {
      "type": "securestring",
      "minLength": 8,
      "maxLength": 128,
      "metadata": {
        "description": "Database FunctionApp password"
      }
    },
    "postgresFuncUser": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Database FunctionApp login name"
      }
    },
    "postgresSkuTier": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The tier of the pricing SKU for the postgres DB"
      }
    },
    "postgresSkuFamily": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The family of the pricing SKU for the postgres DB"
      }
    },
    "postgresSkuCapacity": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The capacity of the pricing SKU for the postgres DB"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "StoreSettings__StoreApiServiceAccountUsername": {
      "type": "string",
      "defaultValue": "US_SVC_GLDE_UAT",
      "minLength": 1,
      "metadata": {
        "description": "Store API service account username."
      }
    },
    "StoreSettings__StoreApiServiceAccountPassword": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "Store API service account password."
      }
    },
    "StoreSettings__StoreApiServiceAccountDomain": {
      "type": "string",
      "defaultValue": "US",
      "minLength": 1
    },
    "app-Admins": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Admin users. Semi colon delimited list of email addresses."
      }
    },
    "StoreSettings__HomeSiteId": {
      "type": "string",
      "minLength": 1
    },
    "StoreSettings__ListingOrigin": {
      "type": "string",
      "minLength": 1
    },
    "IdentitySettings__UserName": {
      "type": "string",
	  "defaultValue": "TestUser@cbre.com",
      "minLength": 1
    },
    "IdentitySettings__Password": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Password for the automatically generated test user account."
      }
    },
    "IdentitySettings__GivenName": {
      "type": "string",
	  "defaultValue": "Test",
      "minLength": 1
    },
    "IdentitySettings__FamilyName": {
      "type": "string",
	  "defaultValue": "User",
      "minLength": 1
    },
    "IdentitySettings__Key": {
      "type": "string",
      "minLength": 32,
      "metadata": {
        "description": "Encryption key used for encrypting bearer tokens. Takes the ASCII encoding of the string provided here and uses that as the security key. Can be any string of 32 or more ASCII characters."
      }
    },
    "SearchApiEndPoint": {
      "type": "string",
      "minLength": 1
    },
    "AspNetCore_Environment": {
      "type": "string",
      "defaultValue": "Development",
      "metadata": {
        "description": "Used to determine which appsettings.{Environment}.json is loaded"
      }
    },
    "ApiStore__Consumption__ConsumerKey": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Api Store consumption consumer key."
      }
    },
    "ApiStore__Consumption__ConsumerSecret": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Api store consumption consumer secret."
      }
    },
    "ApiStore__Ingestion__ConsumerKey": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Api Store Ingestion consumer key."
      }
    },
    "ApiStore__Ingestion__ConsumerSecret": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Api store Ingestion consumer secret."
      }
    },
    "Edp__AwsS3Bucket__AwsKey": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Edp S3 Bucket access key."
      }
    },
    "Edp__AwsS3Bucket__AwsSecretKey": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Edp S3 Bucket secret key."
      }
    },
    "Edp__AwsS3Bucket__BucketName": {
      "type": "string"
    },
    "Edp__AwsS3Bucket__BucketRegion": {
      "type": "string"
    }
  },
  "variables": {
    "databaseName":                       "[parameters('appName')]",
    "appServiceName":                     "[parameters('appName')]",
    "keyVaultName":                       "[parameters('keyVaultName')]",
    "storageAccountName":                 "[parameters('storageAccountName')]",
    "postgresServerName":                 "[parameters('appName')]",
    "applicationInsightsComponentName":   "[parameters('appName')]",
    "postgresServerCreateMode":           "Default",
    "functionAppName":                    "[concat(parameters('appName'), '-func')]",
    "storageAccountId":                   "[concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
    "corsAllowedDomain":                  "[parameters('corsAllowedDomain')]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2017-08-01",
      "kind": "linux",
      "name": "[variables('appServiceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [],
      "sku": {
        "name": "[parameters('appServicePlan')]"
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('appServiceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServiceName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "name": "[variables('appServiceName')]",
        "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('appServiceName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|5.0",
          "alwaysOn": false
        }
      },
      "resources": [
        {
          "name": "[concat(variables('appServiceName'), '/appsettings')]",
          "type": "Microsoft.Web/sites/config",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
          ],
          "properties": {
            "Admins": "[parameters('app-Admins')]",
            "KEYVAULT_ENDPOINT": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(format('microsoft.insights/components/{0}', variables('applicationInsightsComponentName')), '2015-05-01').InstrumentationKey]",
            "ASPNETCORE_ENVIRONMENT": "[parameters('AspNetCore_Environment')]",
            "StoreSettings__StoreApiServiceAccountDomain": "[parameters('StoreSettings__StoreApiServiceAccountDomain')]",
            "StoreSettings__HomeSiteId": "[parameters('StoreSettings__HomeSiteId')]",	
            "StoreSettings__ListingOrigin": "[parameters('StoreSettings__ListingOrigin')]",
            "IdentitySettings__UserName": "[parameters('IdentitySettings__UserName')]",
            "IdentitySettings__Password": "[parameters('IdentitySettings__Password')]",
            "IdentitySettings__GivenName": "[parameters('IdentitySettings__GivenName')]",
            "IdentitySettings__FamilyName": "[parameters('IdentitySettings__FamilyName')]",
            "IdentitySettings__Key": "[parameters('IdentitySettings__Key')]",
            "Edp__AwsS3Bucket__BucketName": "[parameters('Edp__AwsS3Bucket__BucketName')]",
            "Edp__AwsS3Bucket__BucketRegion": "[parameters('Edp__AwsS3Bucket__BucketRegion')]"
          }
        }
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('appServiceName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": true,
          "linuxFxVersion": "DOCKER|mcr.microsoft.com/azure-functions/dotnet:2.0-appservice",
          "connectionStrings": [
            {
              "name": "PublishingPostgres",
              "connectionString": "[format('host={0}.postgres.database.azure.com;port=5432;database={1};user id={2}@{0};password={3};SslMode=Require', variables('postgresServerName'), variables('databaseName'), parameters('postgresFuncUser'), parameters('postgresFuncPassword'))]",
              "type": "Custom"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServiceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2016-08-01",
          "name": "appsettings",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(format('microsoft.insights/components/{0}', variables('applicationInsightsComponentName')), '2015-05-01').InstrumentationKey]",
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]",
            "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]",
            "FUNCTIONS_EXTENSION_VERSION": "~2",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "ExpirationTimeInMin": "1440",
            "HomeSiteId": "[parameters('StoreSettings__HomeSiteId')]",
            "ListingOrigin": "[parameters('StoreSettings__ListingOrigin')]",
            "SearchApiEndPoint": "[parameters('SearchApiEndPoint')]",
            "SearchKey": "Common.PrimaryKey",
            "TimerInterval": "0 */5 * * * *"
          }
        }
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers",
      "apiVersion": "2017-12-01",
      "name": "[variables('postgresServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[concat(if(equals('basic',toLower(parameters('postgresSkuTier'))),'B',if(equals('memoryoptimized',toLower(parameters('postgresSkuTier'))),'MO','GP')),'_',parameters('postgresSkuFamily'),'_',parameters('postgresSkuCapacity'))]",
        "tier": "[parameters('postgresSkuTier')]",
        "family": "[parameters('postgresSkuFamily')]",
        "capacity": "[parameters('postgresSkuCapacity')]"
      },
      "properties": {
        "administratorLogin": "[parameters('postgresAdminLogin')]",
        "administratorLoginPassword": "[parameters('postgresAdminPassword')]",
        "storageProfile": {
          "storageMB": 102400,
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled"
        },
        "version": "11",
        "sslEnforcement": "Enabled",
        "createMode": "[variables('postgresServerCreateMode')]"
      },
      "resources": [
        {
        "type": "firewallrules",
          "apiVersion": "2017-12-01",
          "dependsOn": [
            "[concat('Microsoft.DBforPostgreSQL/servers/', variables('postgresServerName'))]"
          ],
          "location": "[parameters('location')]",
          "name": "[concat(variables('postgresServerName'),'AllowAllWindowsAzureIps')]",
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "name": "[variables('databaseName')]",
          "type": "databases",
          "apiVersion": "2017-12-01",
          "properties": {
            "charset": "utf8",
            "collation": "English_United States.1252"
          },
          "dependsOn": [
            "[concat('Microsoft.DBforPostgreSQL/servers/', variables('postgresServerName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ],
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/', variables('appServiceName')), '2018-11-01', 'Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('appServiceName')), '2018-11-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "Get",
                "List"
              ]
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false
      }
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2015-05-01",
      "name": "[variables('applicationInsightsComponentName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/ConnectionStrings--Postgres')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[concat('Database=', variables('databaseName'), ';Server=', reference(resourceId('Microsoft.DBforPostgreSQL/servers',variables('postgresServerName'))).fullyQualifiedDomainName, ';User Id=', parameters('postgresAdminLogin'),'@', variables('postgresServerName'),';Password=', parameters('postgresAdminPassword'), ';SslMode=Require')]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/ConnectionStrings--BlobStorage')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',concat(listKeys(variables('storageAccountId'),'2019-06-01').keys[0].value))]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/StoreSettings--StoreApiServiceAccountPassword')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('StoreSettings__StoreApiServiceAccountPassword')]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(variables('keyVaultName'), '/StoreSettings--StoreApiServiceAccountUsername')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('StoreSettings__StoreApiServiceAccountUsername')]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": [
            {
              "allowedOrigins": [
                "[variables('corsAllowedDomain')]"
              ],
              "allowedMethods": [
                "GET"
              ],
              "maxAgeInSeconds": 1,
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            }
          ]
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageAccountName'), '/default/azure-webjobs-dashboard')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageAccountName'), '/default/photos')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "Blob"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageAccountName'), '/default/uploadedexcel')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-04-01",
      "name": "[concat(variables('storageAccountName'), '/default/avatar')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "Blob"
      }
    }
  ]
}
